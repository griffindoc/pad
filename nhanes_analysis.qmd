---
title: "nhanes_analysis"
format: html
editor: visual
---

## Dependencies

```{r,include=FALSE}
pacman::p_load(tidyverse,srvyr,svyVGAM,broom,patchwork)
```

## Load data

#multinomial regression using survey weights

#ref:https://tech.popdata.org/pma-data-hub/posts/2021-08-15-covid-analysis/

```{r Load analysis datafile}
#| echo: false
# Restore appended NHANES dataset as survey design
nhanesDesign<-readRDS(here::here("data_files","nhanesDesign.rds"))
```

### Missing data

```{r}

#examine missing data
library("finalfit")

# Examine with ff_glimpse
explanatory = c("age", "gender", 
                "diab_coded", "ht_coded",  
                "smoking_coded", "ethnicity","crp","ldl","iron","ferritin",
                "tsat","tibc","fib4_coded","acr_scaled","creatinine","fpg","insulin","hdl",
                "t.chol","bmi","hba1c")
dependent = "pad"

#examine missing data
df_final %>% 
  ff_glimpse(dependent, explanatory)

#visualize missing data
df_final%>%
  missing_pattern(dependent, explanatory)
```

### Custom functions

Since svyVGAM cannot be directly converted to tidy output, we use a customised function.

```{r}
#| echo: false
#function to convert to a tidymodel
tidy.svyVGAM <- function(
    x, 
    conf.int = FALSE, 
    conf.level = 0.95,
    exponentiate = FALSE, 
    ...
){
  # Replace `summary(x)$coefficients` with `summary(x)$coeftable`
  ret <- as_tibble(summary(x)$coeftable, rownames = "term")
  
  # All of this stays the same:
  colnames(ret) <- c("term", "estimate", "std.error", "statistic", "p.value")
  coefs <- tibble::enframe(stats::coef(x), name = "term", value = "estimate")
  ret <- left_join(coefs, ret, by = c("term", "estimate"))
  if (conf.int){
    ci <- broom:::broom_confint_terms(x, level = conf.level, ...)
    ret <- dplyr::left_join(ret, ci, by = "term")
  }
  if (exponentiate){ret <- broom:::exponentiate(ret)}
}

#custom theme
theme_personal <- function(base_size = 12, 
                            dark_text = "#1A242F") {
  
  mid_text <-  monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[2]
  light_text <-  monochromeR::generate_palette(dark_text, "go_lighter", n_colours = 5)[3]
  
  theme_minimal(base_size = base_size) +
    theme(text = element_text(colour = mid_text, lineheight = 1.1),
          plot.title = element_text(colour = dark_text, size = rel(1.4)),
          plot.subtitle = element_text(size = rel(1.1)),
          axis.text.y = element_text(colour = light_text, size = rel(0.9)),
          axis.title.y = element_text(size = 12), 
          axis.text.x = element_text(colour = mid_text, size = 12),
          axis.title.x = element_text(size = 12),
          legend.position = "top",
          legend.justification = 1,
          panel.grid = element_line(colour = "#F3F4F5"),
          plot.caption = element_text(size = rel(0.8)))
}

```

### Gender stratified

```{r}
#define gender-stratified survey designs
#subsetting data the right way by incorporating the design
nhanesDesign.m<-subset(nhanesDesign,gender=="0")
nhanesDesign.f<-subset(nhanesDesign,gender=="1")
```

#### Iron: gender stratified

```{r}

#define variables
dependent_var <- "pad"
model2_vars <- c("age", "ethnicity", "bmi", "smoking_coded")
model3_vars <- c("diab_coded", "fib4_coded", "acr_scaled", "crp_scaled", "ht_coded")
model4_vars <- c("ldl_scaled","antihy.lipid","anti.platelet")

#define iron variables
iron_t <- "iron.t"
iron_scaled <- "iron_scaled"

#define model parameters for iron as a categorical variable
iron.model1_form <- paste(dependent_var, "~", iron_t, collapse = " ")
iron.model2_form <- paste(dependent_var, "~", iron_t, "+", paste(model2_vars, collapse = "+"), collapse = " ")
iron.model3_form <- paste(dependent_var, "~", iron_t, "+", paste(c(model2_vars, model3_vars), collapse = "+"), collapse = " ")
iron.model4_form <- paste(dependent_var, "~", iron_t, "+", paste(c(model2_vars, model3_vars, model4_vars), collapse = "+"), collapse = " ")

#define model parameters for iron as a continuous variable
iron.cont.model1_form <- paste(dependent_var, "~", iron_scaled, collapse = " ")
iron.cont.model2_form <- paste(dependent_var, "~", iron_scaled, "+", paste(model2_vars, collapse = "+"), collapse = " ")
iron.cont.model3_form <- paste(dependent_var, "~", iron_scaled, "+", paste(c(model2_vars, model3_vars), collapse = "+"), collapse = " ")
iron.cont.model4_form <- paste(dependent_var, "~", iron_scaled, "+", paste(c(model2_vars, model3_vars, model4_vars), collapse = "+"), collapse = " ")



#define the function to carrout regression and summarize the result
my.reg_M= function(model) {
  svyVGAM::svy_vglm(
    formula = as.formula(model),
    design = nhanesDesign.m, 
    family = propodds())%>%
    tidy.svyVGAM(., exponentiate = TRUE,conf.int = TRUE)
}
iron_M.m1<-my.reg_M(iron.model1_form)
iron_M.m2<-my.reg_M(iron.model2_form)
iron_M.m3<-my.reg_M(iron.model3_form)
iron_M.m4<-my.reg_M(iron.model4_form)
iron_cont_M.m1<-my.reg_M(iron.cont.model1_form)
iron_cont_M.m2<-my.reg_M(iron.cont.model2_form)
iron_cont_M.m3<-my.reg_M(iron.cont.model3_form)
iron_cont_M.m4<-my.reg_M(iron.cont.model4_form)


#add model as a column for graphs
iron_M.m1$model<-"Model 1"
iron_M.m2$model<-"Model 2"
iron_M.m3$model<-"Model 3"
iron_M.m4$model<-"Model 4"
iron_cont_M.m1$model<-"Model 1"
iron_cont_M.m2$model<-"Model 2"
iron_cont_M.m3$model<-"Model 3"
iron_cont_M.m4$model<-"Model 4"

#combine into one dataframe
iron_M.all<-rbind(iron_M.m1[2:4,1:8],iron_M.m2[2:4,1:8],iron_M.m3[2:4,1:8],
                  iron_M.m4[2:4,1:8],
                  iron_cont_M.m1[2,1:8],iron_cont_M.m2[2,1:8],
                  iron_cont_M.m3[2,1:8],iron_cont_M.m4[2,1:8])
rm(iron_M.m1,iron_M.m2,iron_M.m3,iron_M.m4,iron_cont_M.m1,iron_cont_M.m2,iron_cont_M.m3,iron_cont_M.m4)

#define confidence interval
iron_M.all<-iron_M.all%>%
  mutate(p.val_flag=ifelse(p.value<0.05,"p<0.05","NS"),
         sex="M")%>%
  unite("variable",term,model, sep=":",na.rm = TRUE, remove = FALSE)



#define the function to carrout regression and summarize the result
my.reg_F= function(model) {
  svyVGAM::svy_vglm(
    formula = as.formula(model),
    design = nhanesDesign.f, 
    family = propodds())%>%
    tidy.svyVGAM(., exponentiate = TRUE,conf.int = TRUE)
}
iron_F.m1<-my.reg_F(iron.model1_form)
iron_F.m2<-my.reg_F(iron.model2_form)
iron_F.m3<-my.reg_F(iron.model3_form)
iron_F.m4<-my.reg_F(iron.model4_form)
iron_cont_F.m1<-my.reg_F(iron.cont.model1_form)
iron_cont_F.m2<-my.reg_F(iron.cont.model2_form)
iron_cont_F.m3<-my.reg_F(iron.cont.model3_form)
iron_cont_F.m4<-my.reg_F(iron.cont.model4_form)


#add model as a column for graphs
iron_F.m1$model<-"Model 1"
iron_F.m2$model<-"Model 2"
iron_F.m3$model<-"Model 3"
iron_F.m4$model<-"Model 4"
iron_cont_F.m1$model<-"Model 1"
iron_cont_F.m2$model<-"Model 2"
iron_cont_F.m3$model<-"Model 3"
iron_cont_F.m4$model<-"Model 4"

#combine into one dataframe
iron_F.all<-rbind(iron_F.m1[2:4,1:8],iron_F.m2[2:4,1:8],iron_F.m3[2:4,1:8],
                  iron_F.m4[2:4,1:8],
                  iron_cont_F.m1[2,1:8],iron_cont_F.m2[2,1:8],
                  iron_cont_F.m3[2,1:8],iron_cont_F.m4[2,1:8])
rm(iron_F.m1,iron_F.m2,iron_F.m3,iron_F.m4,iron_cont_F.m1,iron_cont_F.m2,iron_cont_F.m3,iron_cont_F.m4)

#define confidence interval
iron_F.all<-iron_F.all%>%
  mutate(p.val_flag=ifelse(p.value<0.05,"p<0.05","NS"),
         sex="F")%>%
  unite("variable",term,model, sep=":",na.rm = TRUE, remove = FALSE)

iron_MF.all<-rbind(iron_M.all,iron_F.all)
rm(iron_M.all,iron_F.all)

saveRDS(iron_MF.all,here::here("data_files","iron_MF.all.rds"))
```

#### Ferritin: gender stratified

```{r}

#define variables
dependent_var <- "pad"
model2_vars <- c("age", "ethnicity", "bmi", "smoking_coded")
model3_vars <- c("diab_coded", "fib4_coded", "acr_scaled", "crp_scaled", "ht_coded")
model4_vars <- c("ldl_scaled","antihy.lipid","anti.platelet")

#define ferritin variables
ferritin_t <- "ferritin.t"
ferritin_scaled <- "ferritin_scaled"

#define model parameters for ferritin as a categorical variable
ferritin.model1_form <- paste(dependent_var, "~", ferritin_t, collapse = " ")
ferritin.model2_form <- paste(dependent_var, "~", ferritin_t, "+", paste(model2_vars, collapse = "+"), collapse = " ")
ferritin.model3_form <- paste(dependent_var, "~", ferritin_t, "+", paste(c(model2_vars, model3_vars), collapse = "+"), collapse = " ")
ferritin.model4_form <- paste(dependent_var, "~", ferritin_t, "+", paste(c(model2_vars, model3_vars, model4_vars), collapse = "+"), collapse = " ")

#define model parameters for ferritin as a continuous variable
ferritin.cont.model1_form <- paste(dependent_var, "~", ferritin_scaled, collapse = " ")
ferritin.cont.model2_form <- paste(dependent_var, "~", ferritin_scaled, "+", paste(model2_vars, collapse = "+"), collapse = " ")
ferritin.cont.model3_form <- paste(dependent_var, "~", ferritin_scaled, "+", paste(c(model2_vars, model3_vars), collapse = "+"), collapse = " ")
ferritin.cont.model4_form <- paste(dependent_var, "~", ferritin_scaled, "+", paste(c(model2_vars, model3_vars, model4_vars), collapse = "+"), collapse = " ")



#define the function to carrout regression and summarize the result
my.reg_M= function(model) {
  svyVGAM::svy_vglm(
    formula = as.formula(model),
    design = nhanesDesign.m, 
    family = propodds())%>%
    tidy.svyVGAM(., exponentiate = TRUE,conf.int = TRUE)
}
ferritin_M.m1<-my.reg_M(ferritin.model1_form)
ferritin_M.m2<-my.reg_M(ferritin.model2_form)
ferritin_M.m3<-my.reg_M(ferritin.model3_form)
ferritin_M.m4<-my.reg_M(ferritin.model4_form)
ferritin_cont_M.m1<-my.reg_M(ferritin.cont.model1_form)
ferritin_cont_M.m2<-my.reg_M(ferritin.cont.model2_form)
ferritin_cont_M.m3<-my.reg_M(ferritin.cont.model3_form)
ferritin_cont_M.m4<-my.reg_M(ferritin.cont.model4_form)


#add model as a column for graphs
ferritin_M.m1$model<-"Model 1"
ferritin_M.m2$model<-"Model 2"
ferritin_M.m3$model<-"Model 3"
ferritin_M.m4$model<-"Model 4"
ferritin_cont_M.m1$model<-"Model 1"
ferritin_cont_M.m2$model<-"Model 2"
ferritin_cont_M.m3$model<-"Model 3"
ferritin_cont_M.m4$model<-"Model 4"

#combine into one dataframe
ferritin_M.all<-rbind(ferritin_M.m1[2:4,1:8],ferritin_M.m2[2:4,1:8],ferritin_M.m3[2:4,1:8],
                  ferritin_M.m4[2:4,1:8],
                  ferritin_cont_M.m1[2,1:8],ferritin_cont_M.m2[2,1:8],
                  ferritin_cont_M.m3[2,1:8],ferritin_cont_M.m4[2,1:8])
rm(ferritin_M.m1,ferritin_M.m2,ferritin_M.m3,ferritin_M.m4,ferritin_cont_M.m1,ferritin_cont_M.m2,ferritin_cont_M.m3,ferritin_cont_M.m4)

#define confidence interval
ferritin_M.all<-ferritin_M.all%>%
  mutate(p.val_flag=ifelse(p.value<0.05,"p<0.05","NS"),
         sex="M")%>%
  unite("variable",term,model, sep=":",na.rm = TRUE, remove = FALSE)



#define the function to carrout regression and summarize the result
my.reg_F= function(model) {
  svyVGAM::svy_vglm(
    formula = as.formula(model),
    design = nhanesDesign.f, 
    family = propodds())%>%
    tidy.svyVGAM(., exponentiate = TRUE,conf.int = TRUE)
}
ferritin_F.m1<-my.reg_F(ferritin.model1_form)
ferritin_F.m2<-my.reg_F(ferritin.model2_form)
ferritin_F.m3<-my.reg_F(ferritin.model3_form)
ferritin_F.m4<-my.reg_F(ferritin.model4_form)
ferritin_cont_F.m1<-my.reg_F(ferritin.cont.model1_form)
ferritin_cont_F.m2<-my.reg_F(ferritin.cont.model2_form)
ferritin_cont_F.m3<-my.reg_F(ferritin.cont.model3_form)
ferritin_cont_F.m4<-my.reg_F(ferritin.cont.model4_form)


#add model as a column for graphs
ferritin_F.m1$model<-"Model 1"
ferritin_F.m2$model<-"Model 2"
ferritin_F.m3$model<-"Model 3"
ferritin_F.m4$model<-"Model 4"
ferritin_cont_F.m1$model<-"Model 1"
ferritin_cont_F.m2$model<-"Model 2"
ferritin_cont_F.m3$model<-"Model 3"
ferritin_cont_F.m4$model<-"Model 4"

#combine into one dataframe
ferritin_F.all<-rbind(ferritin_F.m1[2:4,1:8],ferritin_F.m2[2:4,1:8],ferritin_F.m3[2:4,1:8],
                  ferritin_F.m4[2:4,1:8],
                  ferritin_cont_F.m1[2,1:8],ferritin_cont_F.m2[2,1:8],
                  ferritin_cont_F.m3[2,1:8],ferritin_cont_F.m4[2,1:8])
rm(ferritin_F.m1,ferritin_F.m2,ferritin_F.m3,ferritin_F.m4,ferritin_cont_F.m1,ferritin_cont_F.m2,ferritin_cont_F.m3,ferritin_cont_F.m4)

#define confidence interval
ferritin_F.all<-ferritin_F.all%>%
  mutate(p.val_flag=ifelse(p.value<0.05,"p<0.05","NS"),
         sex="F")%>%
  unite("variable",term,model, sep=":",na.rm = TRUE, remove = FALSE)

ferritin_MF.all<-rbind(ferritin_M.all,ferritin_F.all)
rm(ferritin_M.all,ferritin_F.all)

saveRDS(ferritin_MF.all,here::here("data_files","ferritin_MF.all.rds"))


```

#### TSAT: gender stratified

```{r}

#define variables
dependent_var <- "pad"
model2_vars <- c("age", "ethnicity", "bmi", "smoking_coded")
model3_vars <- c("diab_coded", "fib4_coded", "acr_scaled", "crp_scaled", "ht_coded")
model4_vars <- c("ldl_scaled","antihy.lipid","anti.platelet")

#define tsat variables
tsat_t <- "tsat.t"
tsat_scaled <- "tsat_scaled"

#define model parameters for tsat as a categorical variable
tsat.model1_form <- paste(dependent_var, "~", tsat_t, collapse = " ")
tsat.model2_form <- paste(dependent_var, "~", tsat_t, "+", paste(model2_vars, collapse = "+"), collapse = " ")
tsat.model3_form <- paste(dependent_var, "~", tsat_t, "+", paste(c(model2_vars, model3_vars), collapse = "+"), collapse = " ")
tsat.model4_form <- paste(dependent_var, "~", tsat_t, "+", paste(c(model2_vars, model3_vars, model4_vars), collapse = "+"), collapse = " ")

#define model parameters for tsat as a continuous variable
tsat.cont.model1_form <- paste(dependent_var, "~", tsat_scaled, collapse = " ")
tsat.cont.model2_form <- paste(dependent_var, "~", tsat_scaled, "+", paste(model2_vars, collapse = "+"), collapse = " ")
tsat.cont.model3_form <- paste(dependent_var, "~", tsat_scaled, "+", paste(c(model2_vars, model3_vars), collapse = "+"), collapse = " ")
tsat.cont.model4_form <- paste(dependent_var, "~", tsat_scaled, "+", paste(c(model2_vars, model3_vars, model4_vars), collapse = "+"), collapse = " ")



#define the function to carrout regression and summarize the result
my.reg_M= function(model) {
  svyVGAM::svy_vglm(
    formula = as.formula(model),
    design = nhanesDesign.m, 
    family = propodds())%>%
    tidy.svyVGAM(., exponentiate = TRUE,conf.int = TRUE)
}
tsat_M.m1<-my.reg_M(tsat.model1_form)
tsat_M.m2<-my.reg_M(tsat.model2_form)
tsat_M.m3<-my.reg_M(tsat.model3_form)
tsat_M.m4<-my.reg_M(tsat.model4_form)
tsat_cont_M.m1<-my.reg_M(tsat.cont.model1_form)
tsat_cont_M.m2<-my.reg_M(tsat.cont.model2_form)
tsat_cont_M.m3<-my.reg_M(tsat.cont.model3_form)
tsat_cont_M.m4<-my.reg_M(tsat.cont.model4_form)


#add model as a column for graphs
tsat_M.m1$model<-"Model 1"
tsat_M.m2$model<-"Model 2"
tsat_M.m3$model<-"Model 3"
tsat_M.m4$model<-"Model 4"
tsat_cont_M.m1$model<-"Model 1"
tsat_cont_M.m2$model<-"Model 2"
tsat_cont_M.m3$model<-"Model 3"
tsat_cont_M.m4$model<-"Model 4"

#combine into one dataframe
tsat_M.all<-rbind(tsat_M.m1[2:4,1:8],tsat_M.m2[2:4,1:8],tsat_M.m3[2:4,1:8],
                  tsat_M.m4[2:4,1:8],
                  tsat_cont_M.m1[2,1:8],tsat_cont_M.m2[2,1:8],
                  tsat_cont_M.m3[2,1:8],tsat_cont_M.m4[2,1:8])
rm(tsat_M.m1,tsat_M.m2,tsat_M.m3,tsat_M.m4,tsat_cont_M.m1,tsat_cont_M.m2,tsat_cont_M.m3,tsat_cont_M.m4)

#define confidence interval
tsat_M.all<-tsat_M.all%>%
  mutate(p.val_flag=ifelse(p.value<0.05,"p<0.05","NS"),
         sex="M")%>%
  unite("variable",term,model, sep=":",na.rm = TRUE, remove = FALSE)



#define the function to carrout regression and summarize the result
my.reg_F= function(model) {
  svyVGAM::svy_vglm(
    formula = as.formula(model),
    design = nhanesDesign.f, 
    family = propodds())%>%
    tidy.svyVGAM(., exponentiate = TRUE,conf.int = TRUE)
}
tsat_F.m1<-my.reg_F(tsat.model1_form)
tsat_F.m2<-my.reg_F(tsat.model2_form)
tsat_F.m3<-my.reg_F(tsat.model3_form)
tsat_F.m4<-my.reg_F(tsat.model4_form)
tsat_cont_F.m1<-my.reg_F(tsat.cont.model1_form)
tsat_cont_F.m2<-my.reg_F(tsat.cont.model2_form)
tsat_cont_F.m3<-my.reg_F(tsat.cont.model3_form)
tsat_cont_F.m4<-my.reg_F(tsat.cont.model4_form)


#add model as a column for graphs
tsat_F.m1$model<-"Model 1"
tsat_F.m2$model<-"Model 2"
tsat_F.m3$model<-"Model 3"
tsat_F.m4$model<-"Model 4"
tsat_cont_F.m1$model<-"Model 1"
tsat_cont_F.m2$model<-"Model 2"
tsat_cont_F.m3$model<-"Model 3"
tsat_cont_F.m4$model<-"Model 4"

#combine into one dataframe
tsat_F.all<-rbind(tsat_F.m1[2:4,1:8],tsat_F.m2[2:4,1:8],tsat_F.m3[2:4,1:8],
                  tsat_F.m4[2:4,1:8],
                  tsat_cont_F.m1[2,1:8],tsat_cont_F.m2[2,1:8],
                  tsat_cont_F.m3[2,1:8],tsat_cont_F.m4[2,1:8])
rm(tsat_F.m1,tsat_F.m2,tsat_F.m3,tsat_F.m4,tsat_cont_F.m1,tsat_cont_F.m2,tsat_cont_F.m3,tsat_cont_F.m4)

#define confidence interval
tsat_F.all<-tsat_F.all%>%
  mutate(p.val_flag=ifelse(p.value<0.05,"p<0.05","NS"),
         sex="F")%>%
  unite("variable",term,model, sep=":",na.rm = TRUE, remove = FALSE)

tsat_MF.all<-rbind(tsat_M.all,tsat_F.all)
rm(tsat_M.all,tsat_F.all)

saveRDS(tsat_MF.all,here::here("data_files","tsat_MF.all.rds"))


```

#### TIBC: gender stratified

```{r}

#define variables
dependent_var <- "pad"
model2_vars <- c("age", "ethnicity", "bmi", "smoking_coded")
model3_vars <- c("diab_coded", "fib4_coded", "acr_scaled", "crp_scaled", "ht_coded")
model4_vars <- c("ldl_scaled","antihy.lipid","anti.platelet")

#define tibc variables
tibc_t <- "tibc.t"
tibc_scaled <- "tibc_scaled"

#define model parameters for tibc as a categorical variable
tibc.model1_form <- paste(dependent_var, "~", tibc_t, collapse = " ")
tibc.model2_form <- paste(dependent_var, "~", tibc_t, "+", paste(model2_vars, collapse = "+"), collapse = " ")
tibc.model3_form <- paste(dependent_var, "~", tibc_t, "+", paste(c(model2_vars, model3_vars), collapse = "+"), collapse = " ")
tibc.model4_form <- paste(dependent_var, "~", tibc_t, "+", paste(c(model2_vars, model3_vars, model4_vars), collapse = "+"), collapse = " ")

#define model parameters for tibc as a continuous variable
tibc.cont.model1_form <- paste(dependent_var, "~", tibc_scaled, collapse = " ")
tibc.cont.model2_form <- paste(dependent_var, "~", tibc_scaled, "+", paste(model2_vars, collapse = "+"), collapse = " ")
tibc.cont.model3_form <- paste(dependent_var, "~", tibc_scaled, "+", paste(c(model2_vars, model3_vars), collapse = "+"), collapse = " ")
tibc.cont.model4_form <- paste(dependent_var, "~", tibc_scaled, "+", paste(c(model2_vars, model3_vars, model4_vars), collapse = "+"), collapse = " ")



#define the function to carrout regression and summarize the result
my.reg_M= function(model) {
  svyVGAM::svy_vglm(
    formula = as.formula(model),
    design = nhanesDesign.m, 
    family = propodds())%>%
    tidy.svyVGAM(., exponentiate = TRUE,conf.int = TRUE)
}
tibc_M.m1<-my.reg_M(tibc.model1_form)
tibc_M.m2<-my.reg_M(tibc.model2_form)
tibc_M.m3<-my.reg_M(tibc.model3_form)
tibc_M.m4<-my.reg_M(tibc.model4_form)
tibc_cont_M.m1<-my.reg_M(tibc.cont.model1_form)
tibc_cont_M.m2<-my.reg_M(tibc.cont.model2_form)
tibc_cont_M.m3<-my.reg_M(tibc.cont.model3_form)
tibc_cont_M.m4<-my.reg_M(tibc.cont.model4_form)


#add model as a column for graphs
tibc_M.m1$model<-"Model 1"
tibc_M.m2$model<-"Model 2"
tibc_M.m3$model<-"Model 3"
tibc_M.m4$model<-"Model 4"
tibc_cont_M.m1$model<-"Model 1"
tibc_cont_M.m2$model<-"Model 2"
tibc_cont_M.m3$model<-"Model 3"
tibc_cont_M.m4$model<-"Model 4"

#combine into one dataframe
tibc_M.all<-rbind(tibc_M.m1[2:4,1:8],tibc_M.m2[2:4,1:8],tibc_M.m3[2:4,1:8],
                  tibc_M.m4[2:4,1:8],
                  tibc_cont_M.m1[2,1:8],tibc_cont_M.m2[2,1:8],
                  tibc_cont_M.m3[2,1:8],tibc_cont_M.m4[2,1:8])
rm(tibc_M.m1,tibc_M.m2,tibc_M.m3,tibc_M.m4,tibc_cont_M.m1,tibc_cont_M.m2,tibc_cont_M.m3,tibc_cont_M.m4)

#define confidence interval
tibc_M.all<-tibc_M.all%>%
  mutate(p.val_flag=ifelse(p.value<0.05,"p<0.05","NS"),
         sex="M")%>%
  unite("variable",term,model, sep=":",na.rm = TRUE, remove = FALSE)



#define the function to carrout regression and summarize the result
my.reg_F= function(model) {
  svyVGAM::svy_vglm(
    formula = as.formula(model),
    design = nhanesDesign.f, 
    family = propodds())%>%
    tidy.svyVGAM(., exponentiate = TRUE,conf.int = TRUE)
}
tibc_F.m1<-my.reg_F(tibc.model1_form)
tibc_F.m2<-my.reg_F(tibc.model2_form)
tibc_F.m3<-my.reg_F(tibc.model3_form)
tibc_F.m4<-my.reg_F(tibc.model4_form)
tibc_cont_F.m1<-my.reg_F(tibc.cont.model1_form)
tibc_cont_F.m2<-my.reg_F(tibc.cont.model2_form)
tibc_cont_F.m3<-my.reg_F(tibc.cont.model3_form)
tibc_cont_F.m4<-my.reg_F(tibc.cont.model4_form)


#add model as a column for graphs
tibc_F.m1$model<-"Model 1"
tibc_F.m2$model<-"Model 2"
tibc_F.m3$model<-"Model 3"
tibc_F.m4$model<-"Model 4"
tibc_cont_F.m1$model<-"Model 1"
tibc_cont_F.m2$model<-"Model 2"
tibc_cont_F.m3$model<-"Model 3"
tibc_cont_F.m4$model<-"Model 4"

#combine into one dataframe
tibc_F.all<-rbind(tibc_F.m1[2:4,1:8],tibc_F.m2[2:4,1:8],tibc_F.m3[2:4,1:8],
                  tibc_F.m4[2:4,1:8],
                  tibc_cont_F.m1[2,1:8],tibc_cont_F.m2[2,1:8],
                  tibc_cont_F.m3[2,1:8],tibc_cont_F.m4[2,1:8])
rm(tibc_F.m1,tibc_F.m2,tibc_F.m3,tibc_F.m4,tibc_cont_F.m1,tibc_cont_F.m2,tibc_cont_F.m3,tibc_cont_F.m4)

#define confidence interval
tibc_F.all<-tibc_F.all%>%
  mutate(p.val_flag=ifelse(p.value<0.05,"p<0.05","NS"),
         sex="F")%>%
  unite("variable",term,model, sep=":",na.rm = TRUE, remove = FALSE)

tibc_MF.all<-rbind(tibc_M.all,tibc_F.all)
rm(tibc_M.all,tibc_F.all)

saveRDS(tibc_MF.all,here::here("data_files","tibc_MF.all.rds"))


```

#### Save file

```{r}
all.iron <- rbind(iron_MF.all[13:16,1:11],iron_MF.all[29:32,1:11],
                 ferritin_MF.all[13:16,1:11],ferritin_MF.all[29:32,1:11],
                 tibc_MF.all[13:16,1:11],tibc_MF.all[29:32,1:11],
                 tsat_MF.all[13:16,1:11],tsat_MF.all[29:32,1:11]
                  )
all.iron |> saveRDS(here::here("data_files","all.iron.rds"))
```

### Generate reports

#### Ferritin

```{r}
# Extract the parameters for rows with p-value < 0.05
params <- ferritin_MF.all[ferritin_MF.all$p.value < 0.05, c("variable", "sex","estimate", "conf.low", "conf.high", "p.value")]

# Initialize an empty character vector for storing the statements
statements <- c()

# Loop through each row with p-value < 0.05 and create a statement
for (i in 1:nrow(params)) {
  statement <- paste0("(", params[i, "sex"],">",params[i, "variable"], ": OR ", round(params[i, "estimate"], 2), ", 95% CI ",
                      round(params[i, "conf.low"], 2), "-", round(params[i, "conf.high"], 2), ", P=",
                      round(params[i, "p.value"], 3), ")")
  # Add the statement to the vector
  statements <- c(statements, statement)
}

# Combine the statements into a single string
ferritin.report <- paste(statements, collapse = " ")
```

#### TSAT

```{r}
#tsat
# Extract the parameters for rows with p-value < 0.05
params <- tsat_MF.all[tsat_MF.all$p.value < 0.05, c("variable", "sex","estimate", "conf.low", "conf.high", "p.value")]

# Initialize an empty character vector for storing the statements
statements <- c()

# Loop through each row with p-value < 0.05 and create a statement
for (i in 1:nrow(params)) {
  statement <- paste0("(", params[i, "sex"],">",params[i, "variable"], ": OR ", round(params[i, "estimate"], 2), ", 95% CI ",
                      round(params[i, "conf.low"], 2), "-", round(params[i, "conf.high"], 2), ", P=",
                      round(params[i, "p.value"], 3), ")")
  # Add the statement to the vector
  statements <- c(statements, statement)
}

# Combine the statements into a single string
tsat.report <- paste(statements, collapse = " ")
```

#### Iron

```{r}
#iron
# Extract the parameters for rows with p-value < 0.05
params <- iron_MF.all[iron_MF.all$p.value < 0.05, c("variable", "sex","estimate", "conf.low", "conf.high", "p.value")]

# Initialize an empty character vector for storing the statements
statements <- c()

# Loop through each row with p-value < 0.05 and create a statement
for (i in 1:nrow(params)) {
  statement <- paste0("(", params[i, "sex"],">",params[i, "variable"], ": OR ", round(params[i, "estimate"], 2), ", 95% CI ",
                      round(params[i, "conf.low"], 2), "-", round(params[i, "conf.high"], 2), ", P=",
                      round(params[i, "p.value"], 3), ")")
  # Add the statement to the vector
  statements <- c(statements, statement)
}

# Combine the statements into a single string
iron.report <- paste(statements, collapse = " ")
```

#### TIBC

```{r}
#tibc
# Extract the parameters for rows with p-value < 0.05
params <- tibc_MF.all[tibc_MF.all$p.value < 0.05, c("variable", "sex","estimate", "conf.low", "conf.high", "p.value")]

# Initialize an empty character vector for storing the statements
statements <- c()

# Loop through each row with p-value < 0.05 and create a statement
for (i in 1:nrow(params)) {
  statement <- paste0("(", params[i, "sex"],">",params[i, "variable"], ": OR ", round(params[i, "estimate"], 2), ", 95% CI ",
                      round(params[i, "conf.low"], 2), "-", round(params[i, "conf.high"], 2), ", P=",
                      round(params[i, "p.value"], 3), ")")
  # Add the statement to the vector
  statements <- c(statements, statement)
}

# Combine the statements into a single string
tibc.report <- paste(statements, collapse = " ")

```

```{r}
the answer for the multiplication is 
```
